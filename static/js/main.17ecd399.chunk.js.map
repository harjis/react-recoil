{"version":3,"sources":["features/Todos/atoms/index.ts","features/Todos/components/TodoItem/TodoItem.tsx","features/Todos/hooks/useTodo.ts","features/Todos/components/TodoItemCreator/TodoItemCreator.tsx","features/Todos/components/TodoListFilters/TodoListFilter.tsx","features/Todos/selectors/index.ts","features/Todos/components/TodoListStats/TodoListStats.tsx","api/todos.ts","features/Todos/components/TodoList/TodoList.tsx","features/Todos/hooks/useTodos.ts","components/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["todoIdsState","atom","key","default","tempTodo","atomFamily","todoState","selectorFamily","get","todoId","todo","Error","set","newTodo","todoListFilterState","TodoItem","removeTodo","useRecoilState","setTodo","editItemText","event","value","currentTarget","text","toggleItemCompletion","isComplete","useTodo","type","onChange","checked","onClick","id","TodoItemCreator","props","useState","inputValue","setInputValue","addTodo","TodoListFilters","filter","setFilter","filteredTodoIdsState","selector","todoIds","todoListStatsState","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted","TodoListStats","useRecoilValue","formattedPercentCompleted","Math","round","getId","todos","reduce","acc","cur","concat","TodoList","setTodoIds","loadTodos","useRecoilCallback","a","Promise","resolve","setTimeout","fetchedTodos","ids","push","React","useEffect","prevIds","filteredTodoIds","useTodos","map","Loading","App","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17ecd399.chunk.js","sourcesContent":["import { atom, atomFamily, selectorFamily } from \"recoil\";\n\nimport { Todo } from \"../types\";\n\nexport const todoIdsState = atom<number[]>({\n  key: \"todoIdsState\",\n  default: [],\n});\n\nconst tempTodo = atomFamily<Todo | null, number>({\n  key: \"todo\",\n  default: null,\n});\nexport const todoState = atomFamily<Todo, number>({\n  key: \"todoState\",\n  default: selectorFamily<Todo, number>({\n    key: \"todoState/default\",\n    get: (todoId) => ({ get }) => {\n      const todo = get(tempTodo(todoId));\n      if (todo === null) {\n        throw new Error(`Fatal error: Todo with id ${todoId} was not found`);\n      }\n      return todo;\n    },\n    set: (todoId) => ({ set }, newTodo) => set(tempTodo(todoId), newTodo),\n  }),\n});\n\nexport const todoListFilterState = atom({\n  key: \"todoListFilterState\",\n  default: \"Show All\",\n});\n","import React from \"react\";\n\nimport { useTodo } from \"../../hooks/useTodo\";\n\ntype Props = {\n  todoId: number;\n  removeTodo: (todoId: number) => void;\n};\nexport const TodoItem: React.FC<Props> = ({ todoId, removeTodo }) => {\n  const { todo, editItemText, toggleItemCompletion } = useTodo(todoId);\n\n  return (\n    <div>\n      <input type=\"text\" value={todo.text} onChange={editItemText} />\n      <input\n        type=\"checkbox\"\n        checked={todo.isComplete}\n        onChange={toggleItemCompletion}\n      />\n      <button\n        onClick={() => {\n          removeTodo(todo.id);\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n","import { ChangeEvent } from \"react\";\nimport { useRecoilState } from \"recoil\";\n\nimport { todoState } from \"../atoms\";\n\nexport const useTodo = (todoId: number) => {\n  const [todo, setTodo] = useRecoilState(todoState(todoId));\n\n  const editItemText = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value;\n    setTodo((todo) => ({\n      ...todo,\n      text: value,\n    }));\n  };\n\n  const toggleItemCompletion = () => {\n    setTodo((todo) => ({ ...todo, isComplete: !todo.isComplete }));\n  };\n\n  return {\n    todo,\n    editItemText,\n    toggleItemCompletion,\n  };\n};\n","import React, { ChangeEvent, useState } from \"react\";\n\ntype Props = {\n  addTodo: (text: string) => void;\n};\nexport const TodoItemCreator: React.FC<Props> = (props) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value;\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button\n        onClick={() => {\n          props.addTodo(inputValue);\n          setInputValue(\"\");\n        }}\n      >\n        Add\n      </button>\n    </div>\n  );\n};\n","import React, { ChangeEvent } from \"react\";\nimport { useRecoilState } from \"recoil\";\n\nimport { todoListFilterState } from \"../../atoms\";\n\nexport const TodoListFilters = () => {\n  const [filter, setFilter] = useRecoilState(todoListFilterState);\n\n  const updateFilter = (event: ChangeEvent<HTMLSelectElement>) => {\n    const value = event.currentTarget.value;\n    setFilter(value);\n  };\n\n  return (\n    <>\n      Filter:\n      <select value={filter} onChange={updateFilter}>\n        <option value=\"Show All\">All</option>\n        <option value=\"Show Completed\">Completed</option>\n        <option value=\"Show Uncompleted\">Uncompleted</option>\n      </select>\n    </>\n  );\n};\n","import { selector } from \"recoil\";\n\nimport { todoIdsState, todoListFilterState, todoState } from \"../atoms\";\n\nexport const filteredTodoIdsState = selector({\n  key: \"filteredTodoListState\",\n  get: ({ get }) => {\n    const filter = get(todoListFilterState);\n    const todoIds = get(todoIdsState);\n\n    switch (filter) {\n      case \"Show Completed\":\n        return todoIds.filter((todoId) => get(todoState(todoId)).isComplete);\n      case \"Show Uncompleted\":\n        return todoIds.filter((todoId) => !get(todoState(todoId)).isComplete);\n      default:\n        return todoIds;\n    }\n  },\n});\n\nexport const todoListStatsState = selector({\n  key: \"todoListStatsState\",\n  get: ({ get }) => {\n    const todoIds = get(todoIdsState);\n    const totalNum = todoIds.length;\n    const totalCompletedNum = todoIds.filter(\n      (todoId) => get(todoState(todoId)).isComplete\n    ).length;\n    const totalUncompletedNum = totalNum - totalCompletedNum;\n    const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum;\n\n    return {\n      totalNum,\n      totalCompletedNum,\n      totalUncompletedNum,\n      percentCompleted,\n    };\n  },\n});\n","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { todoListStatsState } from \"../../selectors\";\n\nexport const TodoListStats = () => {\n  const {\n    totalNum,\n    totalCompletedNum,\n    totalUncompletedNum,\n    percentCompleted,\n  } = useRecoilValue(todoListStatsState);\n\n  const formattedPercentCompleted = Math.round(percentCompleted * 100);\n\n  return (\n    <ul>\n      <li>Total items: {totalNum}</li>\n      <li>Items completed: {totalCompletedNum}</li>\n      <li>Items not completed: {totalUncompletedNum}</li>\n      <li>Percent completed: {formattedPercentCompleted}</li>\n    </ul>\n  );\n};\n","import { Todo } from \"../features/Todos/types\";\n\nlet id = 1;\nexport function getId() {\n  return id++;\n}\n\nconst todos = [getId(), getId(), getId(), getId(), getId()].reduce<Todo[]>(\n  (acc, cur) => {\n    return acc.concat({ id: cur, text: `Todo ${cur}`, isComplete: false });\n  },\n  []\n);\n\nexport const getTodos = (): Promise<Todo[]> =>\n  new Promise<Todo[]>((resolve) => {\n    setTimeout(() => resolve(todos), 1000);\n  });\n","import React from \"react\";\n\nimport { TodoItem } from \"../TodoItem/TodoItem\";\nimport { TodoItemCreator } from \"../TodoItemCreator/TodoItemCreator\";\nimport { TodoListFilters } from \"../TodoListFilters/TodoListFilter\";\nimport { TodoListStats } from \"../TodoListStats/TodoListStats\";\nimport { useTodos } from \"../../hooks/useTodos\";\n\nexport const TodoList = () => {\n  const { filteredTodoIds, addTodo, removeTodo } = useTodos();\n\n  return (\n    <>\n      <TodoListStats />\n      <TodoListFilters />\n      <TodoItemCreator addTodo={addTodo} />\n\n      {filteredTodoIds.map((todoId) => (\n        <TodoItem key={todoId} todoId={todoId} removeTodo={removeTodo} />\n      ))}\n    </>\n  );\n};\n","import React from \"react\";\nimport { useRecoilCallback, useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { getId, getTodos } from \"../../../api/todos\";\nimport { todoIdsState, todoState } from \"../atoms\";\nimport { filteredTodoIdsState } from \"../selectors\";\n\nexport const useTodos = () => {\n  const [todoIds, setTodoIds] = useRecoilState(todoIdsState);\n\n  const loadTodos = useRecoilCallback(\n    ({ set }) => async () => {\n      const fetchedTodos = await getTodos();\n      const ids = [];\n      for (const todo of fetchedTodos) {\n        ids.push(todo.id);\n        set(todoState(todo.id), todo);\n      }\n      set(todoIdsState, ids);\n    },\n    []\n  );\n  React.useEffect(() => {\n    loadTodos();\n  }, [loadTodos]);\n\n  const addTodo = useRecoilCallback(\n    ({ set }) => (text: string) => {\n      const id = getId();\n      setTodoIds((prevIds) => prevIds.concat(id));\n      set(todoState(id), {\n        id,\n        text,\n        isComplete: false,\n      });\n    },\n    []\n  );\n\n  const removeTodo = (id: number) => {\n    setTodoIds(todoIds.filter((todoId) => todoId !== id));\n  };\n\n  const filteredTodoIds = useRecoilValue(filteredTodoIdsState);\n\n  return {\n    filteredTodoIds,\n    addTodo,\n    removeTodo,\n  };\n};\n","import React from \"react\";\n\nexport const Loading = () => <div>Loading...</div>;\n","import React, { Suspense } from \"react\";\nimport { RecoilRoot } from \"recoil\";\n\nimport { TodoList } from \"./features/Todos\";\nimport { Loading } from \"./components/Loading\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <Suspense fallback={<Loading />}>\n        <TodoList />\n      </Suspense>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}